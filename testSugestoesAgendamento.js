const { gerarSugestoesDeAgendamento } = require('./services/ixcService');
const mockOS = require('./app/data/mock_ordens_servico').registros;
const mockOSTecnicosOcupados = require('./app/data/mock_ordens_servico_tecnico_ocupado');
const dayjs = require('dayjs');

async function testarSugestoes() {
  // Criar uma c√≥pia da ordem de servi√ßo de teste (√∫ltima do array)
  const osBase = mockOS[mockOS.length - 1];
  
  // Usar o id_assunto do mock_ordens_servico.js sem override
  const osTeste = { ...osBase };
  console.log(`Ordem de Servi√ßo de Teste (id_assunto: ${osTeste.id_assunto}):`, osTeste);

  try {
    console.log('osTeste:', JSON.stringify(osTeste, null, 2));
    // Mostrar a data atual para refer√™ncia
    console.log(`[TESTE] Data atual: ${new Date().toISOString()}`);
    
    // Pass options to use the mock data with occupied technicians
    const resultado = await gerarSugestoesDeAgendamento(osTeste, {
      mockDados: true,
      mockOrdensTecnicoOcupado: mockOSTecnicosOcupados, // Directly pass the mock data with the correct variable name
      // Usar os valores da configura√ß√£o (diasMin=1, diasMax=8)
      // N√£o for√ßamos mais valores espec√≠ficos para garantir que o sistema use os valores da configura√ß√£o
      debug: true // Habilitar logs detalhados
    });
    console.log('Resultado de gerarSugestoesDeAgendamento:', JSON.stringify(resultado, null, 2));
  } catch (error) {
    console.error('Erro ao testar gerarSugestoesDeAgendamento:', error);
  }
}

// Fun√ß√£o para gerar uma data aleat√≥ria entre hoje e os pr√≥ximos 10 dias
function gerarDataAleatoria() {
  const hoje = dayjs();
  const diasAleatorios = Math.floor(Math.random() * 10) + 1; // 1 a 10 dias
  return hoje.add(diasAleatorios, 'day');
}

// Fun√ß√£o para gerar um per√≠odo aleat√≥rio (M ou T)
function gerarPeriodoAleatorio() {
  return Math.random() < 0.5 ? 'M' : 'T';
}

// Fun√ß√£o para verificar se uma data e per√≠odo espec√≠ficos est√£o dispon√≠veis para agendamento
async function verificarDisponibilidade(dataString, periodo) {
  console.log(`\n========================= TESTE DE DISPONIBILIDADE =========================`);
  console.log(`üîç Verificando disponibilidade para: ${dataString}, per√≠odo: ${periodo}`);
  
  // Criar uma c√≥pia da ordem de servi√ßo de teste
  const osBase = mockOS[mockOS.length - 1];
  const osTeste = { ...osBase };
  
  try {
    // Desabilitar console.log temporariamente para suprimir logs do gerarSugestoesDeAgendamento
    const originalConsoleLog = console.log;
    console.log = function() {};
    
    // Obter sugest√µes de agendamento (sem gerar logs)
    const resultado = await gerarSugestoesDeAgendamento(osTeste, {
      mockDados: true,
      mockOrdensTecnicoOcupado: mockOSTecnicosOcupados,
      debug: false
    });
    
    // Restaurar console.log
    console.log = originalConsoleLog;
    
    // Extrair todas as op√ß√µes dispon√≠veis
    const todasOpcoes = [
      resultado.sugestao,
      ...resultado.alternativas
    ].filter(op => op);
    
    // Ordenar por data
    todasOpcoes.sort((a, b) => a.data.localeCompare(b.data));
    
    // Identificar range de datas dispon√≠veis
    const dataMinima = todasOpcoes[0]?.data;
    const dataMaxima = todasOpcoes[todasOpcoes.length-1]?.data;
    console.log(`üìÖ Range de datas dispon√≠veis: ${dataMinima} at√© ${dataMaxima}`);
    
    // Calcular as op√ß√µes dispon√≠veis por data
    const opcoesPorData = {};
    todasOpcoes.forEach(op => {
      if (!opcoesPorData[op.data]) {
        opcoesPorData[op.data] = { M: false, T: false };
      }
      opcoesPorData[op.data][op.periodo] = !op.limite_instalacao_atingido;
    });
    
    // Verificar se a data solicitada est√° dispon√≠vel
    const dentroDoRange = dataMinima <= dataString && dataString <= dataMaxima;
    const dataTemOpcoes = opcoesPorData[dataString];
    const periodoDisponivel = dataTemOpcoes ? dataTemOpcoes[periodo] : false;
    
    // Exibir resultado da verifica√ß√£o
    if (!dentroDoRange) {
      console.log(`‚ùå [FORA DO RANGE] A data ${dataString} est√° fora do per√≠odo permitido para agendamento`);
    } else if (!dataTemOpcoes) {
      console.log(`‚ùå [DATA BLOQUEADA] A data ${dataString} est√° dentro do range, mas n√£o possui op√ß√µes dispon√≠veis`);
    } else if (!periodoDisponivel) {
      console.log(`‚ùå [PER√çODO INDISPON√çVEL] A data ${dataString} est√° dispon√≠vel, mas o per√≠odo ${periodo} n√£o est√° dispon√≠vel`);
      // Mostrar qual per√≠odo est√° dispon√≠vel
      const outrosPeriodos = Object.entries(dataTemOpcoes)
        .filter(([p, disponivel]) => disponivel)
        .map(([p]) => p);
      if (outrosPeriodos.length > 0) {
        console.log(`‚ÑπÔ∏è Per√≠odos dispon√≠veis para ${dataString}: ${outrosPeriodos.join(', ')}`);
      }
    } else {
      console.log(`‚úÖ [DISPON√çVEL] A data ${dataString} per√≠odo ${periodo} est√° dispon√≠vel para agendamento!`);
    }
    
    // Listar todas as datas e per√≠odos dispon√≠veis
    console.log('\nüìÉ Resumo de disponibilidades:');
    Object.entries(opcoesPorData).forEach(([data, periodos]) => {
      const periodosDisponiveis = Object.entries(periodos)
        .filter(([_, disponivel]) => disponivel)
        .map(([p]) => p);
      if (periodosDisponiveis.length > 0) {
        console.log(`  ${data}: ${periodosDisponiveis.join(', ')}`);
      } else {
        console.log(`  ${data}: Sem hor√°rios dispon√≠veis`);
      }
    });
    
    console.log(`\nTotal de op√ß√µes dispon√≠veis: ${todasOpcoes.length}`);
    console.log(`=====================================================================\n`);
    
    return { disponivel: periodoDisponivel, dentroDoRange, opcoesPorData };
  } catch (error) {
    console.error('Erro ao verificar disponibilidade:', error);
    return { disponivel: false, dentroDoRange: false, erro: error.message };
  }
}

// Fun√ß√£o para testar uma data aleat√≥ria
async function testarDataAleatoria() {
  // Gerar data e per√≠odo aleat√≥rios
  const dataAleatoria = gerarDataAleatoria();
  const periodoAleatorio = gerarPeriodoAleatorio();
  const dataFormatada = dataAleatoria.format('YYYY-MM-DD');
  
  // Verificar disponibilidade
  return await verificarDisponibilidade(dataFormatada, periodoAleatorio);
}

// Fun√ß√£o para testar uma data espec√≠fica informada como argumento
async function testarDataEspecifica(dataString, periodo) {
  if (!dataString) {
    console.log('\nData n√£o informada. Formato esperado: YYYY-MM-DD');
    return;
  }
  
  // Se n√£o foi informado um per√≠odo, testa ambos
  if (!periodo || (periodo !== 'M' && periodo !== 'T')) {
    console.log('Per√≠odo n√£o informado ou inv√°lido. Testando ambos os per√≠odos.');
    await verificarDisponibilidade(dataString, 'M');
    await verificarDisponibilidade(dataString, 'T');
  } else {
    await verificarDisponibilidade(dataString, periodo);
  }
}

// Processar argumentos da linha de comando
const args = process.argv.slice(2);

// Verificar quais testes executar com base nos argumentos
if (args.includes('--apenas-aleatorio')) {
  // Testar com data aleat√≥ria
  testarDataAleatoria();
} else if (args.includes('--data')) {
  // Encontrar a data especificada ap√≥s o argumento --data
  const dataIndex = args.indexOf('--data');
  if (dataIndex < args.length - 1) {
    const dataEspecifica = args[dataIndex + 1];
    
    // Se foi informado o per√≠odo ap√≥s a data (--periodo M ou --periodo T)
    let periodo = null;
    if (args.includes('--periodo')) {
      const periodoIndex = args.indexOf('--periodo');
      if (periodoIndex < args.length - 1) {
        periodo = args[periodoIndex + 1].toUpperCase();
      }
    }
    
    testarDataEspecifica(dataEspecifica, periodo);
  } else {
    console.log('Data n√£o informada ap√≥s o argumento --data');
  }
} else {
  // Executar os testes padr√£o
  testarSugestoes();
  testarDataAleatoria();
}
