require('dotenv').config();
process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';
const dayjs = require('dayjs');
const { loadAgent } = require('../app/engine/loader');
const { OpenAI } = require('openai');

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

async function interpretarMensagem({
  mensagem,
  agentId = 'default-agent',
  promptExtra = '',
  intentAnterior = '',
  mensagemAnterior = ''
}) {
  if (!mensagem || typeof mensagem !== 'string') {
    console.error('‚ùå Mensagem inv√°lida recebida para interpreta√ß√£o:', mensagem);
    return {
      intent: 'default',
      data: {},
      mensagem: 'Desculpa, n√£o consegui entender o que voc√™ quis dizer. Pode tentar de novo?'
    };
  }

  const agent = loadAgent(agentId);

  /**
   * Observa√ß√£o:
   * - No "promptExtra", esperamos vir dados como:
   *   "O usu√°rio se chama Fulano e gosta de alien√≠genas e futebol.
   *    Por favor, fa√ßa small talk sobre isso antes de retomar o assunto principal."
   * - Assim, o GPT ter√° esse contexto e poder√° usar esses detalhes na resposta.
   */
  const prompt = `
Voc√™ √© ${agent.nome}, um assistente focado em atender clientes de forma amig√°vel e eficiente. Sua fun√ß√£o: ${agent.role}.

Use este contexto adicional para estabelecer uma pequena conversa (small talk) sobre o que estiver descrito (nome, interesses etc.), mas sem fugir do seu objetivo principal de suporte.

Caso isso aconte√ßa diga que est√° em horario de trabalho e n√£o pode falar sobre isso, mas quem sabe depois?

Evite responder as frases com uma sauda√ß√£o do tipo Ol√°! S√≥ fale caso tenha certeza que √© a primeira intera√ß√£o do dia e a intent igual a "inicio"

Depois de fazer uma r√°pida men√ß√£o a esse contexto (se existir), interprete a mensagem do usu√°rio e retorne **APENAS** o JSON no seguinte formato:

{
  "intent": "nome_da_intent",
  "data": {},
  "mensagem": "resposta amig√°vel ao usu√°rio, incluindo um pouco do small talk"
}

Contexto anterior:
- √öltima inten√ß√£o: "${intentAnterior}"
- Pergunta anterior: "${mensagemAnterior}"
- Nova mensagem do usu√°rio: "${mensagem}"

*IMPORTANTE*
Se a "Pergunta anterior" tiver alguma sauda√ß√£o do tipo (Oi, Ol√° etc) e a intent anterior for diferente de inicial, n√£o de nenhuma sauda√ß√£o.

### Dados adicionais (promptExtra) Utilize apenas o √∫ltimo inserido caso preciso, evite usar essas informa√ß√µes, s√≥ utilize se for perguntado.
Os topicos abaixo est√£o separados por quebra de linha, se a proxima resposta (Nova mensagem do usu√°rio) n√£o tiver rela√ß√£o/continuidade com a mensagem a (Pergunta anterior) voc√™ volta a pedir o CPF para iniciar o atendimento de agendamento.
${promptExtra}

### Intents poss√≠veis


1) "inicio"  
   - Quando o usu√°rio inicia ou sa√∫da.
   - **N√£o** fazer sauda√ß√£o v√°rias vezes na mesma conversa.
   - Exemplo de resposta (apenas uma vez): 
     {
       "intent": "inicio",
       "data": {},
       "mensagem": "Ol√°, sou ${agent.nome} da Ibiunet! Tudo bem? Poderia me enviar seu CPF para iniciarmos o atendimento?"
     }

2) "aleatorio"  
   - Se o usu√°rio fala algo fora do fluxo ou fora do contexto (ex.: aliens, futebol, etc.).
   - Responda curto e tente puxar o assunto de volta para CPF, agendamento, OS etc.
   - Exemplo:
     {
       "intent": "aleatorio",
       "data": {},
       "mensagem": "Legal (Mostrar interesse sobre o que foi dito), mas primeiro eu vou precisar te identificar! Me mande seu CPF para a gente iniciar."
     }

3) "informar_cpf"  
   - O usu√°rio est√° informando o CPF. Ex:(522.473.726-51 ; 52247372651) deve conter 11 digitos menos que nova a intent deve ser considerada escolher_os
   - Exemplo:
     {
       "intent": "informar_cpf",
       "data": {},
       "mensagem": "Ok, CPF recebido! J√° vou verificar seus dados."
     }

4) "verificar_os"  
   - Ex.: "Quero consultar minha OS" ou "Que dia o t√©cnico vem?" 
   - Exemplo:
     {
       "intent": "verificar_os",
       "data": {},
       "mensagem": "Certo, vou dar uma olhada nas suas OS. S√≥ um instante."
     }

5) "escolher_os"  
   - O usu√°rio escolhe ou informa qual OS quer editar/agendar. Pode vir apenas como um n√∫mero sempre menor que 9 digitos. verificar 
   - Exemplo:
     {
       "intent": "escolher_os",
       "data": {},
       "mensagem": "Entendi, voc√™ escolheu a OS 1234. Agora podemos agendar ou atualizar."
     }

6) "agendar_data"  
   - O usu√°rio pede explicitamente para agendar ou marcar visita.
   - Exemplo:
     {
       "intent": "agendar_data",
       "data": {},
       "mensagem": "Claro! Qual dia seria melhor para voc√™?"
     }

7) "extrair_data"  
   - O usu√°rio mencionou datas em linguagem natural (ex.: amanh√£, s√°bado, dia 20).
   - Exemplo:
     {
       "intent": "extrair_data",
       "data": {},
       "mensagem": "Voc√™ mencionou essa data. Vou interpret√°-la e confirmar."
     }

8) "confirmar_agendamento"  
   - O usu√°rio confirma a data final que deseja.
   - Exemplo:
     {
       "intent": "confirmar_agendamento",
       "data": {},
       "mensagem": "Perfeito, confirmando sua visita. Qualquer mudan√ßa, me avise."
     }

9) "finalizado"
   - Fluxo conclu√≠do ou usu√°rio se despediu.
   - Exemplo:
     {
       "intent": "finalizado",
       "data": {},
       "mensagem": "√ìtimo, encerramos por aqui. Obrigado pelo contato e at√© mais!"
     }

10) "help"
   - O usu√°rio pede ajuda ou n√£o sabe como prosseguir.
   - Exemplo:
     {
       "intent": "help",
       "data": {},
       "mensagem": "Posso te ajudar a informar seu CPF, verificar ou agendar uma OS. O que gostaria?"
     }

11) "desconhecido"
   - N√£o foi poss√≠vel classificar a mensagem.
   - Exemplo:
     {
       "intent": "desconhecido",
       "data": {},
       "mensagem": "N√£o entendi bem. Poderia tentar reformular ou explicar melhor?"
     }

12) "extrair_hora"  
   - O usu√°rio mencionou datas em linguagem natural (ex.: amanh√£, s√°bado, dia 20) e tamb√©m horario ( 10 da manh√£, final da tarde etc)
   - Exemplo:
     {
       "intent": "extrair_hora",
       "data": {},
       "mensagem": "Voc√™ mencionou essa data. Vou interpret√°-la e confirmar."
     }

Importante: **retorne APENAS o JSON** (sem texto fora do objeto JSON). Se n√£o tiver certeza, use "aleatorio" ou "desconhecido".
`;

  console.error('Interpretar intencao promptExtra:', prompt);

  try {
    const resposta = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [
        { role: 'system', content: agent.personality },
        { role: 'user', content: prompt }
      ],
      temperature: 0.2
    });

    const respostaText = resposta.choices[0].message.content;
    return JSON.parse(respostaText);

  } catch (error) {
    console.error('‚ùå Erro no OpenAI:', error);
    return {
      intent: 'default',
      data: {},
      mensagem: 'Desculpa, n√£o entendi o que voc√™ quis dizer. Pode tentar de novo?'
    };
  }
}

/**
 * Gera uma resposta ao usu√°rio com base numa intent conhecida.
 * Pode receber um texto extra (promptAuxiliar) para dar contexto adicional.
 *
 * @param {string} intent
 * @param {string} [agentId='default-agent']
 * @param {Object} [dados={}]
 * @param {string} [promptAuxiliar='']
 * @returns {Promise<string>}
 */
async function responderComBaseNaIntent(intent, agentId = 'default-agent', dados = {}, promptAuxiliar = '') {
  const agent = loadAgent(agentId) || { nome: 'Assistente', role: 'ajudar o usu√°rio de forma gentil e eficaz.' };

  //console.log('üîç Agent carregado:', agent);

  const prompt = `
Voc√™ √© ${agent.nome}, um assistente que deve ajudar o usu√°rio com base na inten√ß√£o: "${intent}".
Sua fun√ß√£o: ${agent.role}.
Use tom informal e amig√°vel, como conversando com o cliente.

Dados adicionais: ${JSON.stringify(dados)}
Contexto extra: ${promptAuxiliar}

Exemplos de resposta:
- "inicio": "Ol√°! Como posso te ajudar? Se quiser, mande seu CPF."
- "aleatorio": Essa intent pode variar muito mas tente fazer com que o usuario responta a pergunta anterior que era " ${JSON.stringify(dados.mensagemAnteriorCliente)}
- "help": "Posso te ajudar a informar seu CPF ou a marcar seu agendamento, √© s√≥ pedir."
- "os_nao_encontrada": 

Retorne SOMENTE a frase (sem JSON).
`;

 console.error('### PROMPT INTEN√á√ÉO ###:', prompt);

  try {
    const resposta = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [
        { role: 'system', content: agent.personality },
        { role: 'user', content: prompt }
      ],
      temperature: 0.5
    });

    return resposta.choices[0].message.content.trim();

  } catch (error) {
    console.error('‚ùå Erro ao gerar resposta por intent:', error);
    return 'Desculpa, tive um problema aqui. Tenta de novo rapidinho?';
  }
}

/**
 * Tenta interpretar uma data na mensagem do usu√°rio (linguagem natural).
 * Retorna "YYYY-MM-DD" ou null caso n√£o consiga identificar.
 *
 * @param {string} mensagem
 * @returns {Promise<string|null>}
 */
async function interpretarDataNatural(mensagem) {
  const prompt = `
Voc√™ √© um assistente que interpreta datas em linguagem natural e retorna sempre no seguinte formato JSON:

{
  "data_interpretada": "YYYY-MM-DD"
}

Tente identificar a data mencionada pelo usu√°rio com base na data atual. Caso n√£o encontre nenhuma data v√°lida, responda:

{
  "data_interpretada": null
}

Frase do usu√°rio: "${mensagem}"
Hoje √©: ${dayjs().format('YYYY-MM-DD')}

Retorne APENAS o JSON, sem mais nada.
`;

  try {
    const resposta = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [
        { role: 'system', content: 'Voc√™ √© um assistente que interpreta datas informais.' },
        { role: 'user', content: prompt }
      ],
      temperature: 0.1
    });

    const json = JSON.parse(resposta.choices[0].message.content);
    console.error('data interpretada:', json.data_interpretada);
    return json.data_interpretada;
  } catch (error) {
    console.error('‚ùå Erro ao interpretar data:', error);
    return null;
  }
}

async function interpretaDataeHora(mensagem) {
  const prompt = `
Voc√™ √© um assistente que interpreta datas e hor√°rios em linguagem natural.

Seu objetivo √© identificar tanto a data quanto o hor√°rio mencionados pelo usu√°rio.

As respostas devem seguir este formato:
{
  "data_interpretada": "YYYY-MM-DD",
  "horario_interpretado": "HH:MM:SS"
}

Hor√°rios v√°lidos:
- 08:00:00
- 10:00:00
- 13:00:00
- 15:00:00
- 17:00:00

Se a data ou o hor√°rio n√£o puderem ser identificados, use null nos respectivos campos.

Mensagem do usu√°rio: "${mensagem}"
Hoje √©: ${dayjs().format('YYYY-MM-DD')}

Retorne APENAS o JSON acima, sem mais nada.
`;

  try {
    const openai = require('openai');
    const client = new openai.OpenAI({ apiKey: process.env.OPENAI_API_KEY });

    const resposta = await client.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [
        { role: 'system', content: 'Voc√™ √© um assistente que interpreta datas e hor√°rios informais.' },
        { role: 'user', content: prompt }
      ],
      temperature: 0.1
    });

    const json = JSON.parse(resposta.choices[0].message.content);
    console.log('üìÖ Data e hor√°rio interpretados:', json);
    return json;
  } catch (error) {
    console.error('‚ùå Erro ao interpretar data e hora:', error);
    return {
      data_interpretada: null,
      horario_interpretado: null
    };
  }
}

async function interpretaHora(mensagem) {
  const prompt = `
Voc√™ √© um assistente que interpreta hor√°rios em linguagem natural e retorna sempre no seguinte formato JSON:

{
  "hora_interpretada": "HH:mm:00"
}

Tente identificar o hor√°rio mencionado pelo usu√°rio com base na frase. Caso n√£o encontre nenhuma hora v√°lida, responda:

{
  "hora_interpretada": null
}

Frase do usu√°rio: "${mensagem}"

Retorne APENAS o JSON, sem mais nada.
`;

  try {
    const resposta = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [
        { role: 'system', content: 'Voc√™ √© um assistente que interpreta hor√°rios informais.' },
        { role: 'user', content: prompt }
      ],
      temperature: 0.1
    });

    const json = JSON.parse(resposta.choices[0].message.content);
    console.error('hora interpretada:', json.hora_interpretada);
    return json.hora_interpretada;
  } catch (error) {
    console.error('‚ùå Erro ao interpretar hora:', error);
    return null;
  }
}

module.exports = {
  interpretarMensagem,
  responderComBaseNaIntent,
  interpretarDataNatural,
  interpretaHora,
  interpretaDataeHora
};
