const { verificarDisponibilidade } = require('./services/ixcService');
const mockOS = require('./app/data/mock_ordens_servico').registros;
const mockOSTecnicosOcupados = require('./app/data/mock_ordens_servico_tecnico_ocupado');
const dayjs = require('dayjs');

// Fun√ß√£o para formatar data para exibi√ß√£o amig√°vel
function formatarData(dataString) {
  const data = dayjs(dataString);
  return data.format('DD/MM/YYYY');
}

// Fun√ß√£o para descrever per√≠odo
function descreverPeriodo(periodo) {
  return periodo === 'M' ? 'Manh√£' : 'Tarde';
}

async function testarDisponibilidadeDeData() {
  console.log('\n======================================================');
  console.log('üîé TESTE DE VERIFICA√á√ÉO DE DISPONIBILIDADE DE AGENDA');
  console.log('======================================================\n');

  // Pegar argumentos da linha de comando
  const args = process.argv.slice(2);
  
  // Data a ser verificada (argumento ou hoje+3 dias)
  let dataString = null;
  if (args.includes('--data')) {
    const dataIndex = args.indexOf('--data');
    if (dataIndex < args.length - 1) {
      dataString = args[dataIndex + 1];
    }
  }
  
  // Se n√£o especificou data, usa hoje+3 dias
  if (!dataString) {
    dataString = dayjs().add(3, 'day').format('YYYY-MM-DD');
    console.log(`üóìÔ∏è  Nenhuma data especificada. Usando data padr√£o: ${formatarData(dataString)}`);
  } else {
    console.log(`üóìÔ∏è  Verificando data: ${formatarData(dataString)}`);
  }
  
  // Per√≠odo a ser verificado (argumento ou ambos)
  let periodo = null;
  if (args.includes('--periodo')) {
    const periodoIndex = args.indexOf('--periodo');
    if (periodoIndex < args.length - 1) {
      periodo = args[periodoIndex + 1].toUpperCase();
    }
  }

  // Pegar a ordem de servi√ßo de teste
  const osBase = mockOS[mockOS.length - 1];
  const osTeste = { ...osBase };
  
  // Executar as verifica√ß√µes
  try {
    // Suprimir logs temporariamente
    const originalConsoleLog = console.log;
    const originalConsoleError = console.error;
    
    if (!periodo || (periodo !== 'M' && periodo !== 'T')) {
      console.log('üìã Verificando disponibilidade para ambos os per√≠odos...\n');
      
      // Suprimir logs
      console.log = function() {};
      console.error = function() {};
      
      // Verificar ambos os per√≠odos
      const resultadoManha = await verificarDisponibilidade(osTeste, dataString, 'M', {
        mockDados: true,
        mockOrdensTecnicoOcupado: mockOSTecnicosOcupados
      });
      
      const resultadoTarde = await verificarDisponibilidade(osTeste, dataString, 'T', {
        mockDados: true,
        mockOrdensTecnicoOcupado: mockOSTecnicosOcupados
      });
      
      // Restaurar logs
      console.log = originalConsoleLog;
      console.error = originalConsoleError;
      
      // Mostrar resultados
      mostrarResultado(dataString, 'M', resultadoManha);
      mostrarResultado(dataString, 'T', resultadoTarde);
      
      // Mostrar resumo de disponibilidade
      mostrarResumoDisponibilidade(resultadoManha.opcoesPorData);
      
    } else {
      console.log(`üìã Verificando disponibilidade para per√≠odo: ${descreverPeriodo(periodo)}\n`);
      
      // Suprimir logs
      console.log = function() {};
      console.error = function() {};
      
      // Verificar o per√≠odo espec√≠fico
      const resultado = await verificarDisponibilidade(osTeste, dataString, periodo, {
        mockDados: true,
        mockOrdensTecnicoOcupado: mockOSTecnicosOcupados
      });
      
      // Restaurar logs
      console.log = originalConsoleLog;
      console.error = originalConsoleError;
      
      // Mostrar resultado
      mostrarResultado(dataString, periodo, resultado);
      
      // Mostrar resumo de disponibilidade
      mostrarResumoDisponibilidade(resultado.opcoesPorData);
    }
  } catch (error) {
    console.error('‚ùå Erro ao verificar disponibilidade:', error);
  }
}

// Fun√ß√£o para exibir o resultado de verifica√ß√£o de disponibilidade
function mostrarResultado(dataString, periodo, resultado) {
  const periodoDescricao = descreverPeriodo(periodo);
  
  if (!resultado.dentroDoRange) {
    console.log(`‚ùå A data ${formatarData(dataString)} est√° fora do per√≠odo permitido para agendamento`);
    console.log(`   Per√≠odo permitido: ${formatarData(resultado.dataMinima)} at√© ${formatarData(resultado.dataMaxima)}\n`);
  } else if (resultado.disponivel) {
    console.log(`‚úÖ Data ${formatarData(dataString)}, ${periodoDescricao}: DISPON√çVEL para agendamento!`);
    // Identificar o t√©cnico dispon√≠vel
    const opcao = resultado.todasOpcoes.find(op => op.data === dataString && op.periodo === periodo);
    if (opcao) {
      console.log(`   T√©cnico dispon√≠vel: ID ${opcao.id_tecnico} (Ocupa√ß√£o atual: ${opcao.ocupacao}/${opcao.limite})`);
      
      // Construir mensagem amig√°vel em partes para evitar problemas de formata√ß√£o
      console.log('   Mensagem amig√°vel:');
      console.log(`   "Prontinho! Sua visita est√° agendada! Ficou para o dia ${formatarData(dataString)}`);
      console.log(`   no per√≠odo da ${periodoDescricao.toLowerCase()}. Estou finalizando nosso atendimento.`);
      console.log(`   Caso precise de mim estou por aqui."`); 
      console.log();
    }
  } else {
    console.log(`‚ùå Data ${formatarData(dataString)}, ${periodoDescricao}: INDISPON√çVEL para agendamento`);
    if (resultado.periodosDisponiveis.length > 0) {
      console.log(`   Per√≠odos dispon√≠veis nesta data: ${resultado.periodosDisponiveis.map(p => descreverPeriodo(p)).join(', ')}\n`);
    }
  }
}

// Fun√ß√£o para mostrar o resumo de disponibilidade
function mostrarResumoDisponibilidade(opcoesPorData) {
  console.log('üìÖ RESUMO DE DISPONIBILIDADE:');
  console.log('----------------------------');
  
  // Ordenar datas
  const datas = Object.keys(opcoesPorData).sort();
  
  datas.forEach(data => {
    const periodos = opcoesPorData[data];
    const disponibilidade = [];
    
    if (periodos.M) disponibilidade.push('Manh√£');
    if (periodos.T) disponibilidade.push('Tarde');
    
    if (disponibilidade.length > 0) {
      console.log(`   ${formatarData(data)}: ${disponibilidade.join(', ')}`);
    } else {
      console.log(`   ${formatarData(data)}: Sem hor√°rios dispon√≠veis`);
    }
  });
  
  console.log('----------------------------');
}

// Executar o teste
testarDisponibilidadeDeData();
