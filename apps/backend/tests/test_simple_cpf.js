// Teste simples da corre√ß√£o do ensureClienteId
async function ensureClienteId(user, respostaObj) {
  if (!user.clienteId) {
    respostaObj.resposta = 'Por favor, me informe seu CPF para que eu possa identificar suas ordens de servi√ßo.';
    user.tipoUltimaPergunta = 'CPF';
    return false;
  }
  return true;
}

async function testarFluxoExtrairData() {
  console.log('=== Teste do Fluxo extrair_data ===\n');
  
  // Simular usu√°rio sem clienteId (cen√°rio do problema)
  const user = {
    numero: '+5511999999999',
    etapa: 'inicio',
    cpf: null,
    clienteId: null, // <- Este √© o problema: usu√°rio novo sem identifica√ß√£o
    nomeCliente: null,
    osList: [],
    osEscolhida: null
  };
  
  let resposta = '';
  const respostaObj = {
    get resposta() { return resposta; },
    set resposta(value) { resposta = value; }
  };
  
  console.log('Cen√°rio: Usu√°rio diz "pode ser hoje?" mas n√£o tem clienteId');
  console.log('Intent detectada: extrair_data');
  console.log('user.clienteId:', user.clienteId);
  console.log('');
  
  // Simular o fluxo da intent extrair_data COM a corre√ß√£o (await)
  console.log('Executando: if (!(await ensureClienteId(user, respostaObj))) {');
  
  if (!(await ensureClienteId(user, respostaObj))) {
    console.log('‚úÖ ensureClienteId retornou FALSE');
    console.log('‚úÖ Fluxo ser√° interrompido (break)');
    console.log('‚úÖ Resposta definida:', resposta);
    console.log('‚úÖ tipoUltimaPergunta:', user.tipoUltimaPergunta);
    console.log('');
    console.log('üéâ RESULTADO: Sistema pedir√° CPF corretamente!');
    return;
  }
  
  // Se chegou aqui, algo deu errado
  console.log('‚ùå ensureClienteId retornou TRUE - isso n√£o deveria acontecer!');
  console.log('‚ùå O fluxo continuaria e mostraria mensagem de OS n√£o selecionada');
}

async function testarFluxoComClienteId() {
  console.log('\n=== Teste com ClienteId Presente ===\n');
  
  // Simular usu√°rio COM clienteId
  const user = {
    numero: '+5511999999999',
    etapa: 'inicio',
    cpf: '12345678901',
    clienteId: '12345', // <- Usu√°rio j√° identificado
    nomeCliente: 'Jo√£o Silva',
    osList: [],
    osEscolhida: null
  };
  
  let resposta = '';
  const respostaObj = {
    get resposta() { return resposta; },
    set resposta(value) { resposta = value; }
  };
  
  console.log('Cen√°rio: Usu√°rio identificado diz "pode ser hoje?"');
  console.log('user.clienteId:', user.clienteId);
  console.log('');
  
  if (!(await ensureClienteId(user, respostaObj))) {
    console.log('‚ùå ensureClienteId retornou FALSE - n√£o deveria!');
    return;
  }
  
  console.log('‚úÖ ensureClienteId retornou TRUE');
  console.log('‚úÖ Fluxo continuar√° normalmente');
  console.log('‚úÖ Resposta n√£o foi alterada:', resposta);
  console.log('');
  console.log('üéâ RESULTADO: Fluxo normal para usu√°rio identificado!');
}

// Executar os testes
async function executarTestes() {
  await testarFluxoExtrairData();
  await testarFluxoComClienteId();
}

executarTestes().catch(console.error);
